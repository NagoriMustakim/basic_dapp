{
  "language": "Solidity",
  "sources": {
    "contracts/sample.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract sample {\n    address private immutable _owner;\n    event transaction(address indexed from, address indexed to, uint256 value);\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    function _getAddress() public view returns (address) {\n        return _owner;\n    }\n\n    function _getBlance() public view returns (uint16) {\n        return uint16(_owner.balance);\n    }\n\n    function send(address payable _to) public payable onlyOwner{\n        _to.transfer(msg.value);\n        emit transaction(msg.sender, _to, msg.value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}